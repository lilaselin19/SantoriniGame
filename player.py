from worker import *from board import *class Player:    def __init__(self, playerType, playerName, gameboard):        self._workers = list()        self._board = gameboard        if playerType == "human":            self._decideMoveStrategy = self._humanStrategy        elif playerType == "random":            self._decideMoveStrategy = self._randomStrategy        else:            self._decideMoveStrategy = self._heuristicStrategy        self._playerName = playerName        if playerName == "white":            self._createWorker("A", 1, 3)            self._createWorker("B", 3, 1)        else:            self._createWorker("Y", 1, 1)            self._createWorker("Z", 3, 3)    def __repr__(self):        return f"{self._playerName} ({self._workers[0].getName}{self._workers[1].getName})"    def _createWorker(self, name, x, y):        w = Worker(name, self, x, y, self._myBoard)        self._workers.append(w)    def _selectWorker(self, name):        for w in self._workers:            if w.getName() == name:                return w        raise NoWorkerError()    def doMove(self):        worker, moveDirection, buildDirection = self._decideMoveStrategy()        worker.move(moveDirection)    def _getAllPossibleMoves(self):        raise NotImplementedError    def _calculateHeuristic(self):        raise NotImplementedError    def _humanStrategy(self):        raise NotImplementedError    def _randomStrategy(self):        raise NotImplementedError    def _heuristicStrategy(self):        raise NotImplementedErrorclass NoWorkerError(Exception):    pass