import workerclass Player:    def __init__(self, type):        self._workers = list()        if type == "human":            self._decideMoveStrategy = self._humanStrategy()        elif type == "random":            self._decideMoveStrategy = self._randomStrategy()        else:            self._decideMoveStrategy = self._heuristicStrategy()    def _selectWorker(self, name):        for w in self._workers:            if w.getName() == name:                return w        return None    def _createWorker(self, name, x, y):        w = worker.Worker(name, self, x, y)        self._workers.append(w)    def doMove(self):        direction = self._decideMoveStrategy()        raise NotImplementedError    def _getAllPossibleMoves(self):        raise NotImplementedError    def _calculateHeuristic(self):        raise NotImplementedError    def _humanStrategy(self):        raise NotImplementedError    def _randomStrategy(self):        raise NotImplementedError    def _heuristicStrategy(self):        raise NotImplementedError