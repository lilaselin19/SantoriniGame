from worker import *from board import *directions = ["n", "ne", "e", "se", "s", "sw", "w", "nw"]class Player:    def __init__(self, playerType, playerName, gameboard):        self._workers = list()        self._board = gameboard        if playerType == "human":            self.doMove = self._humanStrategy        elif playerType == "random":            self.doMove = self._randomStrategy        else:            self.doMove = self._heuristicStrategy        self._playerName = playerName        if playerName == "white":            self._createWorker("A", 1, 3)            self._createWorker("B", 3, 1)        else:            self._createWorker("Y", 1, 1)            self._createWorker("Z", 3, 3)    def __repr__(self):        return f"{self._playerName} ({self._workers[0]}{self._workers[1]})"    def _createWorker(self, name, x, y):        w = Worker(name, self, x, y, self._board)        self._workers.append(w)    def _selectWorker(self, name):        for w in self._workers:            if repr(w) == name:                return w        raise NoWorkerError()    def _getAllPossibleMoves(self):        raise NotImplementedError    def _calculateHeuristic(self):        raise NotImplementedError    def _humanStrategy(self):        print("Select a worker to move")        worker = input("")        while worker not in [repr(w) for w in self._workers]: #what if worker cannot move??            print(f"cannot use {worker}") #correct err message?            print("Select a worker to move")            worker = input("")        worker = self._selectWorker(worker)        print("Select a direction to move (n, ne, e, se, s, sw, w, nw)")        workDirection = input("")        while workDirection not in [worker.checkValidMove(d) for d in directions]: #what if worker cannot move??            print(f"cannot move {workDirection}")  # correct err message?            print("Select a direction to move (n, ne, e, se, s, sw, w, nw)")            workDirection = input("")        #should move        print("Select a direction to build (n, ne, e, se, s, sw, w, nw)")        workDirection = input("")        while workDirection not in [worker.checkValidBuild(d) for d in directions]:  # what if worker cannot move??            print(f"cannot move {workDirection}")  # correct err message?            print("Select a direction to move (n, ne, e, se, s, sw, w, nw)")            workDirection = input("")    def _randomStrategy(self):        raise NotImplementedError    def _heuristicStrategy(self):        raise NotImplementedErrorclass NoWorkerError(Exception):    pass